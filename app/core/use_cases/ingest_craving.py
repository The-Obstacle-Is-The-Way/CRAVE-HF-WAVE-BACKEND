# crave_trinity_backend/app/core/use_cases/ingest_craving.py

from dataclasses import dataclass
from typing import Optional
from datetime import datetime

from app.core.entities.craving import Craving
from app.infrastructure.database.repository import CravingRepository
from app.infrastructure.external.openai_embedding import OpenAIEmbeddingService
from app.infrastructure.vector_db.vector_repository import VectorRepository
from pydantic import BaseModel, ConfigDict  # Import pydantic


@dataclass
class IngestCravingInput:
    """DTO for ingesting a craving log."""
    user_id: int
    description: str
    intensity: int


class IngestCravingOutput(BaseModel):  # Changed to Pydantic BaseModel
    """DTO for returning a successfully saved craving."""
    id: int
    user_id: int
    description: str
    intensity: int
    created_at: datetime
    model_config = ConfigDict(from_attributes=True) # Add Config

def ingest_craving(input_dto: IngestCravingInput, repo: CravingRepository) -> IngestCravingOutput:
    """
    Ingest a new craving into the system.

    Steps:
    1. Convert the input DTO into a domain entity.
    2. Persist the entity to the database via the repository.
    3. Generate embeddings and store them in Pinecone (optional).
    4. Return an output DTO.
    """

    domain_craving = Craving(
        id=None,  # Auto-generated by the DB
        user_id=input_dto.user_id,
        description=input_dto.description,
        intensity=input_dto.intensity,
        created_at=datetime.utcnow(),
    )

    saved_craving = repo.create_craving(
        user_id=domain_craving.user_id,  # Pass user_id explicitly
        description=domain_craving.description,
        intensity=domain_craving.intensity
    )

    # Now optionally generate embeddings and store in Pinecone
    try:
        embed_service = OpenAIEmbeddingService()  # Or use dependency injection
        embedding = embed_service.embed_text(saved_craving.description)

        vector_repo = VectorRepository()
        metadata = {
            "user_id": saved_craving.user_id,
            "created_at": str(saved_craving.created_at)  # Convert datetime to string
        }
        vector_repo.upsert_craving_embedding(saved_craving.id, embedding, metadata)
    except Exception as e:
        # Log errors but don't crash ingestion
        print(f"Embedding error: {e}")

    return IngestCravingOutput(
        id=saved_craving.id,
        user_id=saved_craving.user_id,
        description=saved_craving.description,
        intensity=saved_craving.intensity,
        created_at=saved_craving.created_at,
    )